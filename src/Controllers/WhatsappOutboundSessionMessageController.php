<?php
/*
 * ConversationsAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace ConversationsAPILib\Controllers;

use ConversationsAPILib\APIException;
use ConversationsAPILib\APIHelper;
use ConversationsAPILib\Configuration;
use ConversationsAPILib\Models;
use ConversationsAPILib\Exceptions;
use ConversationsAPILib\Http\HttpRequest;
use ConversationsAPILib\Http\HttpResponse;
use ConversationsAPILib\Http\HttpMethod;
use ConversationsAPILib\Http\HttpContext;
use ConversationsAPILib\Servers;
use ConversationsAPILib\CustomAuthUtility;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class WhatsappOutboundSessionMessageController extends BaseController
{
    /**
     * @var WhatsappOutboundSessionMessageController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return WhatsappOutboundSessionMessageController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithText $body         Request with correct body for the message type you
     *                                                             want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendTextSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithImage $body         Request with correct body for the message type you
     *                                                              want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendImageSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithVideo $body         Request with correct body for the message type you
     *                                                              want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendVideoSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithAudio $body         Request with correct body for the message type you
     *                                                              want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendAudioSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithFile $body         Request with correct body for the message type you
     *                                                             want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendFileSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithContacts $body         Request with correct body for the message type
     *                                                                 you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendContactsSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithLocation $body         Request with correct body for the message type
     *                                                                 you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendLocationSessionMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithListMessage $body         Request with correct body for the message
     *                                                                    type you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendListMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithReplyButton $body         Request with correct body for the message
     *                                                                    type you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendReplyButtonMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithProduct $body         Request with correct body for the message type
     *                                                                you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendProductMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }

    /**
     * This endpoint allows you to send a message across any of our conversations channels, supported
     * messages types can be found under the Structures section.
     *
     * @param Models\GenericMessageStructureWithProductList $body         Request with correct body for the message
     *                                                                    type you want to send.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function sendProductListMessage(
        $body
    ) {
        //check that all required arguments are provided
        if (!isset($body)) {
            throw new \InvalidArgumentException("One or more required arguments were NULL.");
        }


        //prepare query string for API call
        $_queryBuilder = '/v1/messages';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri(Servers::BASE_URL) . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'PublicId' => Configuration::$publicId,
            'Secret' => Configuration::$secret,
            'Content-Type'    => 'application/json'
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //append custom auth authorization headers
        CustomAuthUtility::appendCustomAuthParams($_headers);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid request sent', $_httpContext);
        }

        if ($response->code == 403) {
            throw new APIException(
                'User is not authorized to access this resource with an explicit deny',
                $_httpContext
            );
        }

        if ($response->code == 500) {
            throw new APIException('Internal Server Error', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'ConversationsAPILib\\Models\\MessageSuccessfullyQueuedResponse');
    }
}
